from os.path import normpath


"""
Template generation for this web application.

Loads up a HTML template, populates it with variables generated by the
Python scripts, adds the header and the footer code, and dumps it to the
web client.
"""

class TemplateGenerator:
    TemplatePath = "htmlTemplates"

    def __init__(self, template):
        self.templateFilename = normpath(TemplateGenerator.TemplatePath + "/" + template + ".html")


    def parse(self, variables):
        """
        Variables is a dictionary containing all the data to inject into this template.

        :param variables:
        :return:
        """
        print("Content-Type: text/html")  # HTML is following
        print()  # blank line, end of headers

        variables['NAVBAR_LINKS'] = self.generateNavgationBar()
        self.generateHeader(variables)

        with open(self.templateFilename) as inputFile:
            lines = inputFile.readlines()

        for line in lines:
            line = line.strip()
            for key in variables:
                fromString = "<" + key + ">"
                toString = variables[key]
                line = line.replace(fromString, toString)

            print(line)

        self.generateFooter()


    def generateNavgationBar(self):
        """

        :return: The HTML that represents the navigation bar, as a series of LI A tags
        """
        links = [
            ("Participant Groups", "viewGroups.py"),
            ("Email Templates", "viewEmailTemplates.py"),
            ("Campaign Results", "viewCampaignResults.py")
        ]

        linkTags = []
        for name, url in links:
            linkTags.append("<li><a href=\"" + url + "\">" + name + "</a></li>")

        return "\n".join(linkTags)


    def generateHeader(self, variables):
        """
        :param variables
        :return:
        """
        headerTemplate = normpath(TemplateGenerator.TemplatePath + "/header.html")
        with open(headerTemplate) as inputFile:
            lines = inputFile.readlines()

        for line in lines:
            line = line.strip()

            for key in variables:
                fromString = "<" + key + ">"
                toString = variables[key]
                line = line.replace(fromString, toString)

            print(line)


    def generateFooter(self):
        """

        :return:
        """
        footerTemplate = normpath(TemplateGenerator.TemplatePath + "/footer.html")
        with open(footerTemplate) as inputFile:
            lines = inputFile.readlines()

        for line in lines:
            line = line.strip()

            print(line)
